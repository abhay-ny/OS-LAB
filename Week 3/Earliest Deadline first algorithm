#include <stdio.h>
#include <stdlib.h>

// Structure to represent a task
typedef struct
{
    int id;
    int arrival;
    int execution;
    int deadline;
    int remaining;
} Task;

// Function to compare tasks based on deadline (for sorting)
int compare(const void *a, const void *b)
{
    return ((Task *)a)->deadline - ((Task *)b)->deadline;
}

// EDF Scheduling Function
void EDF_Scheduling(Task tasks[], int n)
{
    int time = 0, completed = 0;
    printf("\nExecution Order:\n");

    while (completed < n)
    {
        // Get ready tasks
        Task ready_queue[n];
        int ready_count = 0;

        for (int i = 0; i < n; i++)
        {
            if (tasks[i].arrival <= time && tasks[i].remaining > 0)
            {
                ready_queue[ready_count++] = tasks[i];
            }
        }

        if (ready_count > 0)
        {
            // Sort ready tasks by earliest deadline
            qsort(ready_queue, ready_count, sizeof(Task), compare);

            // Execute the task with the earliest deadline
            int task_index = -1;
            for (int i = 0; i < n; i++)
            {
                if (tasks[i].id == ready_queue[0].id)
                {
                    task_index = i;
                    break;
                }
            }

            printf("Time %d: Task %d executing\n", time, tasks[task_index].id);
            tasks[task_index].remaining--;

            // If task completes
            if (tasks[task_index].remaining == 0)
            {
                completed++;
            }
        }
        time++;
    }
    printf("\nAll tasks completed.\n");
}

int main()
{
    int n;
    printf("Enter the number of tasks: ");
    scanf("%d", &n);

    Task tasks[n];
    printf("Enter task details (ID, Arrival Time, Execution Time, Deadline):\n");
    for (int i = 0; i < n; i++)
    {
        scanf("%d %d %d %d", &tasks[i].id, &tasks[i].arrival, &tasks[i].execution, &tasks[i].deadline);
        tasks[i].remaining = tasks[i].execution;
    }

    EDF_Scheduling(tasks, n);
    return 0;
}
